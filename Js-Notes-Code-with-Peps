// Functions in Javacsript
      let myFunction = (i, j) => i * j;
      let ans = myFunction(5, 9);
      console.log(ans);

      const sum = (a, b, c, d) => a + b - c / d;
      const output = sum(12, 2, 3, 15, 6);
      console.log("The result of sum is : ", output);

      let summ = function (a, b, c, d) {
        return a * b - c / d + 3;
      };
      console.log("the final sum is :", summ(1, 2, 3, 4));

      function myAddition() {
        let a = 90;
        let b = 99;
        let c = a + b;
        console.log("the final result is : ", c);
        return c;
      }
      myAddition();

      const aFun = (fn, x, y) => {
        return fn() - x + y;
      };
      const result = aFun(myAddition, 9, 84);
      console.log("the arrow function result is = ", result);

      function myCars() {
        let cars = ["galenza", "baleno", "desire-swift", "maruti-suzuki"];
        console.log(cars);

        const car = {
          Name: "galenza",
          Color: "silver",
          Seater: 4,
          Price: "â‚¹8.99999",
          Owner: 1,
        };
        console.log(car);
      }
      myCars();

      const persons = {
        Name: "Mr. Peps",
        favColletions: myCars,
      };
      persons.favColletions();
      console.log(
        "********************************************* My Collection of Object is : *************************************************** \n",
        persons
      );
      //***********************************************************************************************************************
      // Objects in Javascript
      const student = {
        Name: "Laxit",
        Class: 12,
        Rollno: 12143,
        Rank: "Third",
        Marks: 767,
        Seatno: 77,
      };

      // find the length of array
      let length = Object.keys(student).length;
      console.log("The Object length is :", length);

      // create a new Object
      const Person = new Object({
        firstName: "aniket",
        lastName: "singh",
        age: 30,
        city: "Delhi",
      });

      // accessing object property
      let accessing = Person["age"];
      console.log("Person age is :", accessing);

      // JS Object Method :- Methods are action can be performed on an Objects & Object methods are function definations stored as property values:

      // accessing object property using (this)
      const person = new Object({
        firstName: "Nitin",
        Lastname: "Sighaal",
        age: 30,
        city: "Delhi",
        fullName: function () {
          return this.firstName + " " + this.Lastname;
        },
      });
      const fN = person.fullName();
      console.log("The Full Name is : ", fN);

      // Displaying the Javascript Objects
      const std = {
        Name: "Sukhhvendra Kaur",
        Class: 10,
        Rollno: 10141,
        Rank: "Second",
        Marks: 545,
        Seatno: 17,
      };
      // console.log(std);
      // const ekant = std;
      const ekant =
        "The Name of student is " +
        std.Name +
        " from class " +
        std.Class +
        " she got " +
        std.Rank +
        " rank in hole school.";
      console.log(ekant);
      // document.getElementById('demo').innerHTML = ekant;
      document.getElementById("demo").innerHTML = ekant;

      // Constructor Functions in Objects
      function character(first, last, age, height, weight) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.height = height;
        this.weight = weight;
      }

      const ek = new character("Sunil", "Jangid", 24, 6.3, "87kg");
      console.log("Yeh hai first wala new Object ", ek);

      const doo = new character("Mr. Peps", "Mandan", 24, 6, "85kg");
      console.log("Yeh hai second wala new Object ", doo);

      const teen = new character("Suresh", "Paldiya", 21, 5.5, "65kg");
      console.log("Yeh hai third wala new Object ", teen);

      const chyaar = new character("Anita", "Jakhar", 24, 4.3, "47kg");
      console.log("Yeh hai forth wala new Object ", chyaar);

      const ponch = new character("Minaxi", "Paliwal", 19, 4.5, "55kg");
      console.log("Yeh hai fifth wala new Object ", ponch);

      // Note :- In the constructor function, this has no value. The value of this will become the new object when a new object is created.

      // ***********************************************************************************************************************
      // Comparisions Operators in javascript
      let x = 5;
      console.log(
        "************************************ Equalto *******************************"
      ); // its checks value if same then print true otherwise false
      console.log(x == 8);
      console.log(x == 5);
      console.log(x == "5");

      console.log(
        "************************************ Strict equalto *******************************"
      ); // its checks value or type if both are same then print true otherwise false
      console.log(x === 5);
      console.log(x === "5");

      console.log(
        "************************************ Not equalto *******************************"
      ); // Compares two values for inequality after type conversion If the values are different after converting them to the same type, it returns true
      console.log(x != 5);
      console.log(x != 7);

      console.log(
        "************************************ Not strict equalto *******************************"
      ); // Compares two values for inequality without type conversion. Both value and type must be different to return true
      console.log(x !== 5);
      console.log(x !== "5");
      console.log(x !== 4);

      console.log(
        "************************************ Greater than *******************************"
      ); // Checks if the value on the left is strictly greater than the value on the right.
      console.log(x > 8);

      console.log(
        "************************************ Greater than equalto *******************************"
      );
      console.log(x >= 5);
      console.log(x >= 8);

      console.log(
        "************************************ Less than *******************************"
      );
      console.log(x < 8);

      console.log(
        "************************************ Less than equalto *******************************"
      );
      console.log(x <= 8);
      console.log(x <= 4);

      console.log(
        "************************************ Final Program of Comparision Operator *******************************"
      ); // In this program checks men is Elegible to can Vote or Note
      let age = 89;
      function ageCal() {
        if (age >= 1 && age <= 12) {
          console.log("Now you are is a :", "Child");
        } else if (age >= 13 && age <= 19) {
          console.log("Now you are is a :", "TeenAger");
        } else if (age >= 20 && age <= 35) {
          console.log("Now you are is a :", "Young");
        } else if (age >= 36 && age <= 60) {
          console.log("Now you are is a :", "Adult");
        } else if (age >= 61 && age <= 95) {
          console.log("Now you are is a :", "old");
        } else {
          console.log("Now you are is a :", "Death");
        }
      }
      ageCal();

      // ***********************************************************************************************************************
      // Data Types in Javascript
      console.log(
        "************************************ Sting Data Type *******************************"
      ); //strings are defined with ('singleQuotes', "doubleQuotes" and `backticks`)
      function str() {
        let name = "Sunil";
        let lastName = "Kumar";
        let cast = `Suthar`;
        console.log(name + " " + lastName + " " + cast);
        console.log(typeof (name, lastName, cast));
      }
      str();

      console.log(
        "************************************ Number Primitive Data Types *******************************"
      ); // representing integer or floating points numbers
      function num() {
        let x = 78;
        console.log("Integer number is :", x);
        let y = 7.8;
        console.log("Floating points number is :", y);
        console.log(typeof (x, y));
      }
      num();

      console.log(
        "************************************ BigInt Primitive Data Types *******************************"
      ); // Represents integers larger than the Number type can safely handle (larger than 2^53 - 1).

      let big = 5678901234567812345678901234901234567890n;
      console.log("bigInt number is :", big);
      console.log(typeof big);

      console.log(
        "************************************ Boolean Primitive Data Types *******************************"
      ); // Represents one of two values: true or false.
      function checkBoolean() {
        let x = 6;
        console.log("Value is", x == 8);
        console.log("Value is", x != 8);
        console.log(typeof (x != 8));
      }
      checkBoolean();

      console.log(
        "************************************ Undefined & Null Primitive Data Types *******************************"
      );
      function some() {
        let d;
        console.log("When Value is not defined :", d);
        console.log(typeof d);
      }
      some(); // Represents a variable that has been declared but not assigned a value. Its default value is : undefined

      const arr = null; // Represents the intentional absence of any object value. It is often used to represent : null object reference.
      console.log("When value is null :", arr);
      console.log(typeof arr);

      console.log(
        "************************************ Symbol Primitive Data Type *******************************"
      ); // A unique and immutable data type primarily used to create unique property keys for objects.
      let sym = Symbol("description");
      console.log(sym);

      console.log(
        "************************************ Object Non-primitive Data Type *******************************"
      ); // Object is a non-primitive data types & its written with curly braces {}. Object properties are written as name:value pairs, separated by commas. Arrays, Date, Sets, Math, Function its all are type of Objects
      const classRoom = {
        Class: 1,
        ClsT: "Baldev",
        Seats: 54,
        Cr: "Ragvendra Singh",
      };
      console.log("classRoom object is represents :", classRoom);
      console.log(typeof classRoom);

      console.log(
        "***********************************************************************************************************"
      );
      console.log(
        "the typeOf operator return the data type of Javascript Variable"
      );
      console.log(
        "***********************************************************************************************************"
      );

      console.log(
        "+=+=+=+=+=+=+=+=+=+=+=+=+=+ Using toString() method print all date methods +=+=+=+=+=+=+=+=+=+=+=+=+=+=+"
      );
      const day = new Date();
      const toDay = day.toString();
      const toDate = day.toDateString();
      const toDa = day.toLocaleDateString();
      const toDAY = day.toTimeString();
      const TODAY = day.toUTCString();
      console.log("Today date & Time is :", toDay);
      console.log("Today date is :", toDate);
      console.log("Today date is :", toDa);
      console.log("Now time is :", toDAY);
      console.log("Now time is :", TODAY);

      console.log(
        "+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+"
      );

      console.log(
        "*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*= JavaScript String Methods *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*"
      ); //Javascript strings are primitive and immutable: All string methods produce a new string without altering the original string.
      let joy = "congratulation"; // The length property returns the length of a string.
      let l = joy.length;
      console.log("The length of charaters is :", l);
      
      // The charAt() or at() method returns the character at a specified index (position) in a string.
      console.log(
        "The charAt method reruns of indexing value of string :",
        joy.charAt(5).toUpperCase()
      );
      console.log(
        "The at method reruns of indexing position of string :",
        joy.at(0).toUpperCase()
      ); // The At() method returns the character at a specified index (position) in a string.
      
      // The charCodeAt() method returns the code of the character at a specified index in a string. The method returns a UTF-16 code (an integer between 0 and 65535).
      let text = "HELLO WORLD";
      let char = text.charCodeAt(1);
      console.log(
        "The charCodeAt method reruns the code of character at a specified index in a string :",
        char
      );
      
      // The codePointAt() method get code point value at the first position in a string:
      let txt = "HELLO WORLD";
      let code = txt.codePointAt(0);
      console.log(
        "The codePointAt() method used for get code point value at the first position in a string :",
        code
      );
      
      // Javascript String concat() method  joins two or more strings:
      let str1 = "Jangid";
      let str2 = "Sunil";
      let str3 = str1.concat(" ", str2);
      console.log("Connected string is :", str3);
      let str4 = "Jangid" + " + " + "Sunil"; // using the '+' operator concating string;
      console.log("Connected string using '+' operator is :", str4);
      
      // Javascript slice() extracts a part of a string and returns the extracted part in a new string.
      let txts = "Apple, Banana, Kiwi";
      let part = txts.slice(7, 13);
      console.log("The slice string is :", part);
      
      // JavaScript substring() is similar to slice() but the difference is that start and end values less than 0 are treated as 0 in substring().
      let parts = txts.substring(7, 13);
      console.log("The substring part is :", parts);
      
      // Javascript substr() is similar to slice() but the difference is that the second parameter specifies the length of extracted part but in latest javascript standard substr() method is removed and use only {substring() and slice()} methods.
      let strg = "Apple, Banana, Kiwi";
      let newPart = strg.substr(7);
      let newParts = strg.substr(-4); // if the first parameter is negative, the position counts from end to start {rTl}
      console.log("The substr part is :", newPart);
      
      // Converting to UPPERCASE to lowercase
      let uname = "raman deshpandey";
      let upperName = uname.toUpperCase(); // {A string converting into upperCase then use toUpperCase();}
      console.log("The UpperCase name is :", upperName);
      
      let rename = "KARTIKA RANDHAVA";
      let lowerRename = rename.toLowerCase(); // {A string converting into lowerCase then use toLowerCase();}
      console.log("The LowerCase name is :", lowerRename);
      
      // Javascript isWellFormed() return [true] when string is well-formed otherwise it return [false]. A string is not well formed if it contains lone surrogates.
      let STR = "Hello World \uD800"; // this string isNotWellFormed then its produce result is false if this string are wellformed then result will be true
      let results = STR.isWellFormed();
      console.log("Kya yeh string wellformed hai =>", results);
      
      let Str = "Sunil Jangid";
      let strRes = Str.isWellFormed(); // Like this its wellFormed string
      console.log("Kya yeh string wellformed hai =>", strRes); // NOTE:- Lone Surrogates ek aisa Unicode surrogate code point hota hai jo valid surrogate pair ka hissa nahi hota, aur UTF-16 encoding me characters ko represent karne ke liye use kiya jata hai
      
      // Javascript string toWellFormed() this method is return a new string where all"LONE SURROGATES" are replaced with the unicode replacement character (U+FFFD).
      let sTr = "Capsitech \uD800";
      let reSult = sTr.toWellFormed();
      console.log("Is replaced unicode character is :", reSult);
      
      /* Javascript trim() method using for removes whitespace from both sides of a string: 
      Apart from the trim() method, there are a few other ways to remove whitespace from a string
      1. trimStart() :- This method removes the whitespaces only from the begining (left-side) of the string.
      let text = "      Hello World! ";
      let result = text.trimStart();
      console.log(result);  // "Hello World! "
      
      2. trimEnd() :- This method removes the whitespaces only from the end (right-side) of the string.
      let text = " Hello World!      ";
      let result = text.trimEnd();
      console.log(result);  // " Hello World!"
      
      */
      let Text = "   Mr Peps  ";
      let textRes = Text.trim();
      console.log("Without whitespaces string is :", textRes);
      
      // Javascript string padding this method is introduced in ES2017 : padStart() and padEnd() to support padding at the begining and at the end of a string.
      // 1. padStart() method pads a string from the start. It pads a string with another string (multiple times) until it reaches a given length.
      let teXt = "7";
      let padded = teXt.padStart(3, "0");
      console.log("Padding from begining a number :", padded);
      
      // 2. padEnd() method pads a string from the start. It pads a string with another string (multiple times) until it reaches a given length.
      let tExt = "5";
      let pad = tExt.padEnd(4, "0");
      console.log("Padding from end of the string", pad);
      
      // Javascript string repeat() method returns a string with a number of copies of a string. The repeat method returns a new string.The repeat() method does not change the original string.
      let s = "Hello world!";
      let r = s.repeat(2); // In this method repeat the string of 2 times
      console.log("The repeated string is :", r);
      
      /* Javascript replacing string content. {replace()} Using this method replaces a specified value with another value in a string: 
          The replace() method does not change the string it is called on.
          The replace() method returns a new string.
          The replace() method replaces only the first match
          If you want to replace all matches, use a regular expression with the /g flag set. See examples below.
          By default, the replace() method replaces only the first match:
      */
      let oldtext = "Please visit Capsitech!";
      let newText = oldtext.replace("Capsitech", "CodeWithPeps");
      console.log("The replaced text is :", newText);
      
      // The replaceAll() method allows you to specify a regular expression instead of a string to be replaced. If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.
      // In 2021, JavaScript introduced the string method replaceAll()
      let TXT = "I love JavaScript. JavaScript is awesome!";
      let answer = TXT.replaceAll("JavaScript", "codewithPeps");
      console.log("All replaced text is :", answer);
      
      /* Javascript converting a string to an array. If you want to work with a string as an array, you can convert it to an array.
         A string can be converted to an array with the split() method:
         text.split(",")    // Split on commas
         text.split(" ")    // Split on spaces
         text.split("|")    // Split on pipe
         If the separator is omitted, the returned array will contain the whole string in index [0].
         If the separator is "", the returned array will be an array of single characters:
      */
      let Arr = "a,b,c,d,e,f";
      const myArray = text.split(",");
      console.log("Converted array is :", myArray);
      
      // Method to reverse strings
      let greeting = "Welcome to codewithPeps";
      let reversed = greeting.split("").reverse().join("");
      console.log(reversed);
      
      console.log(
        "=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*="
      );
"=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=" Thanks for Reading my Notes "=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*"
